<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Mail;
use App\Mail\CampaignMail;
use App\Models\EmailTemplate;
use App\Models\EmailSubscriber;

class TestMailConnection extends Command
{
    protected $signature = 'test:mail {--email= : Email address to send test to}';
    protected $description = 'Test email connection and send a test email';

    public function handle()
    {
        $this->info('=== üìß –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ü–û–ß–¢–û–í–û–ú–£ –°–ï–†–í–ï–†–£ ===');
        $this->newLine();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        $this->displayCurrentSettings();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (!$this->testConnection()) {
            return 1;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
        return $this->sendTestEmail();
    }

    protected function displayCurrentSettings(): void
    {
        $this->info('üîß –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:');
        $this->line('MAIL_MAILER: ' . config('mail.default'));
        $this->line('MAIL_HOST: ' . config('mail.mailers.smtp.host', config('mail.mailers.sendmail.path', 'sendmail')));
        $this->line('MAIL_PORT: ' . config('mail.mailers.smtp.port', 'N/A'));
        $this->line('MAIL_ENCRYPTION: ' . (config('mail.mailers.smtp.encryption') ?: 'none'));
        $this->line('MAIL_USERNAME: ' . config('mail.mailers.smtp.username'));
        $this->line('MAIL_FROM_ADDRESS: ' . config('mail.from.address'));
        $this->newLine();
    }

    protected function testConnection(): bool
    {
        $this->info('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø...');
        
        $mailer = config('mail.default');
        
        if ($mailer === 'sendmail') {
            $this->info('‚úì –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sendmail - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            return true;
        }

        try {
            $transport = app('mailer')->getSymfonyTransporter();
            
            if (method_exists($transport, 'start')) {
                $transport->start();
                $this->info('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–Ω–æ');
                return true;
            } else {
                $this->info('‚úì –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
                return true;
            }
            
        } catch (\Exception $e) {
            $this->error('‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' . $e->getMessage());
            $this->provideTroubleshootingTips($e->getMessage());
            return false;
        }
    }

    protected function sendTestEmail(): int
    {
        $email = $this->option('email') ?: $this->ask('–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', 'test@example.com');
        
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $this->error('‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞');
            return 1;
        }

        $this->info("üì§ –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –ü–ò–°–¨–ú–ê –ù–ê: {$email}");

        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            $testTemplate = new EmailTemplate([
                'name' => 'Test Template',
                'subject' => '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É',
                'html_content' => $this->getTestEmailTemplate(),
                'variables' => []
            ]);

            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            $testSubscriber = new EmailSubscriber([
                'email' => $email,
                'name' => 'Test User',
                'is_subscribed' => true
            ]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            Mail::to($email)->send(new CampaignMail($testTemplate, $testSubscriber, null));
            
            $this->info('‚úì –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            $this->newLine();
            $this->info('üìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
            $this->line('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º" –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ');
            $this->line('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SPF, DKIM –∏ DMARC –∑–∞–ø–∏—Å–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏');
            $this->line('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π IP –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫');
            
            return 0;
            
        } catch (\Exception $e) {
            $this->error('‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' . $e->getMessage());
            $this->provideTroubleshootingTips($e->getMessage());
            return 1;
        }
    }

    protected function provideTroubleshootingTips(string $error): void
    {
        $this->newLine();
        $this->warn('üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú:');

        if (str_contains($error, 'Connection refused')) {
            $this->line('‚Ä¢ SMTP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            $this->line('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MAIL_HOST –∏ MAIL_PORT –≤ —Ñ–∞–π–ª–µ .env');
            $this->line('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π—Ä–≤–æ–ª–æ–º');
            $this->line('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã (587, 2525, 25)');
            $this->line('‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ sendmail: MAIL_MAILER=sendmail');
        } elseif (str_contains($error, 'Authentication failed')) {
            $this->line('‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SMTP');
            $this->line('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MAIL_USERNAME –∏ MAIL_PASSWORD –≤ —Ñ–∞–π–ª–µ .env');
            $this->line('‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ "–ú–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" (–¥–ª—è Gmail)');
            $this->line('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–¥–ª—è Gmail, Yandex)');
        } elseif (str_contains($error, 'SSL') || str_contains($error, 'TLS')) {
            $this->line('‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º SSL/TLS');
            $this->line('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ MAIL_ENCRYPTION=null –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
            $this->line('‚Ä¢ –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ MAIL_ENCRYPTION=tls');
            $this->line('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
        } else {
            $this->line('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Laravel: storage/logs/laravel.log');
            $this->line('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
            $this->line('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sendmail: MAIL_MAILER=sendmail');
            $this->line('‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö SMTP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
        }

        $this->newLine();
        $this->info('üìã –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï SMTP –ü–†–û–í–ê–ô–î–ï–†–´:');
        $this->line('‚Ä¢ Gmail: smtp.gmail.com:587 (TLS)');
        $this->line('‚Ä¢ Yandex: smtp.yandex.ru:587 (TLS)');
        $this->line('‚Ä¢ Mail.ru: smtp.mail.ru:587 (TLS)');
        $this->line('‚Ä¢ Mailgun: smtp.mailgun.org:587 (TLS)');
        $this->line('‚Ä¢ SendGrid: smtp.sendgrid.net:587 (TLS)');

        $this->newLine();
        $this->info('‚ö° –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:');
        $this->line('php artisan config:clear && php artisan queue:restart');
    }

    protected function getTestEmailTemplate(): string
    {
        return '
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px 10px 0 0; text-align: center; }
        .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }
        .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .info { background: #cce7ff; border: 1px solid #99d6ff; color: #004085; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .footer { text-align: center; padding: 20px; color: #6c757d; font-size: 14px; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center; }
        .stat-number { font-size: 24px; font-weight: bold; color: #667eea; }
        .stat-label { font-size: 12px; color: #6c757d; text-transform: uppercase; }
    </style>
</head>
<body>
    <div class="header">
        <h1>‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω!</h1>
        <p>Email —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</p>
    </div>
    
    <div class="content">
        <div class="success">
            <strong>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</strong> –í–∞—à–∞ email —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ email —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
        </div>
        
        <h3>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:</h3>
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number">' . now()->format('H:i') . '</div>
                <div class="stat-label">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">' . config('mail.default') . '</div>
                <div class="stat-label">Mail Driver</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">' . config('mail.from.address') . '</div>
                <div class="stat-label">From Address</div>
            </div>
        </div>
        
        <div class="info">
            <strong>‚ÑπÔ∏è –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</strong>
            <ul>
                <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ SPF, DKIM –∏ DMARC –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞</li>
                <li>–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</li>
                <li>–°–æ–∑–¥–∞–π—Ç–µ email —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫</li>
                <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏</li>
            </ul>
        </div>
        
        <p><strong>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</strong> ' . now()->format('d.m.Y H:i:s') . '</p>
        <p><strong>–°–µ—Ä–≤–µ—Ä:</strong> ' . config('app.name') . '</p>
        <p><strong>–í–µ—Ä—Å–∏—è Laravel:</strong> ' . app()->version() . '</p>
    </div>
    
    <div class="footer">
        <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ<br>
        <small>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è email –∫–∞–º–ø–∞–Ω–∏—è–º–∏</small></p>
    </div>
</body>
</html>';
    }
}
