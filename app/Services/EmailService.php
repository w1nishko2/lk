<?php

namespace App\Services;

use App\Models\EmailCampaign;
use App\Models\EmailRecipient;
use App\Jobs\SendEmailCampaign;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Log;
use Exception;

class EmailService
{
    protected int $maxAttempts = 3;
    protected array $retryableErrors = [
        'Connection timed out',
        'Connection refused',
        'Temporary failure'
    ];

    public function startCampaign(EmailCampaign $campaign): void
    {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Job
        SendEmailCampaign::dispatch($campaign);
    }

    public function processCampaign(EmailCampaign $campaign): void
    {
        $recipients = $campaign->pendingRecipients()->get();
        
        foreach ($recipients as $recipient) {
            if ($campaign->fresh()->status !== 'sending') {
                break; // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –∫–∞–º–ø–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            }

            try {
                $this->sendEmailToRecipient($campaign, $recipient);
                
                $campaign->increment('sent_count');
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
                if ($campaign->delay_seconds > 0) {
                    sleep($campaign->delay_seconds);
                }
                
            } catch (Exception $e) {
                Log::error('Email sending failed', [
                    'campaign_id' => $campaign->id,
                    'recipient_id' => $recipient->id,
                    'error' => $e->getMessage()
                ]);
                
                $this->handleFailedEmail($campaign, $recipient, $e->getMessage());
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
        $this->checkCampaignCompletion($campaign);
    }

    protected function sendEmailToRecipient(EmailCampaign $campaign, EmailRecipient $recipient): void
    {
        $emailContent = $this->renderEmail($campaign, [
            'name' => $recipient->name ?: '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç',
            'email' => $recipient->email
        ]);

        Mail::send([], [], function ($message) use ($campaign, $recipient, $emailContent) {
            $settings = $campaign->settings ?? [];
            
            $message->to($recipient->email, $recipient->name)
                   ->subject($campaign->subject)
                   ->from($settings['from_email'] ?? 'email@weebs.ru', 
                          $settings['from_name'] ?? '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –°–∞–π—Ç–æ–≤')
                   ->html($emailContent);
                   
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
            $message->getHeaders()->addTextHeader('X-Mailer', 'Laravel');
            $message->getHeaders()->addTextHeader('X-Priority', '3');
            $message->getHeaders()->addTextHeader('X-Campaign-ID', $campaign->id);
        });

        $recipient->markAsSent();
    }

    public function renderEmail(EmailCampaign $campaign, array $variables = []): string
    {
        $template = $this->getEmailTemplate($campaign->template);
        $content = $campaign->content;

        // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        foreach ($variables as $key => $value) {
            $content = str_replace('{{' . $key . '}}', $value, $content);
            $template = str_replace('{{' . $key . '}}', $value, $template);
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —à–∞–±–ª–æ–Ω
        $template = str_replace('{{content}}', $content, $template);

        return $template;
    }

    protected function getEmailTemplate(string $templateName): string
    {
        $templates = [
            'sales' => $this->getSalesTemplate(),
            'informational' => $this->getInformationalTemplate(),
            'promotional' => $this->getPromotionalTemplate()
        ];

        return $templates[$templateName] ?? $templates['sales'];
    }

    protected function getSalesTemplate(): string
    {
        return '
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{subject}}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }
        .container { max-width: 600px; margin: 0 auto; background-color: #fff; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        .header { text-align: center; padding: 20px 0; border-bottom: 2px solid #007bff; margin-bottom: 20px; }
        .header h1 { color: #007bff; margin: 0; }
        .content { padding: 20px 0; }
        .highlight { background-color: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 20px 0; }
        .cta-button { display: inline-block; padding: 12px 30px; background-color: #28a745; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; font-weight: bold; }
        .footer { text-align: center; padding: 20px 0; border-top: 1px solid #eee; color: #666; font-size: 12px; }
        .problems { background-color: #f8d7da; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .solution { background-color: #d4edda; padding: 15px; border-radius: 5px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –°–∞–π—Ç–æ–≤</h1>
            <p>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã!</p>
        </div>
        
        <div class="content">
            <h2>–ü—Ä–∏–≤–µ—Ç, {{name}}!</h2>
            
            <div class="problems">
                <h3>‚ùå –ó–Ω–∞–∫–æ–º—ã –ª–∏ –≤–∞–º —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã?</h3>
                <ul>
                    <li>–ù—É–∂–µ–Ω —Å–∞–π—Ç, –Ω–æ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞?</li>
                    <li>–•–æ—Ç–∏—Ç–µ –±—ã—Å—Ç—Ä–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?</li>
                    <li>–£—Å—Ç–∞–ª–∏ –æ—Ç —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ —Å –∫—É—á–µ–π –ª–∏—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π?</li>
                    <li>–ù—É–∂–µ–Ω —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω?</li>
                </ul>
            </div>
            
            <div class="solution">
                <h3>‚úÖ –£ –Ω–∞—Å –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ!</h3>
                <p><strong>–ù–∞—à –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∞–π—Ç–æ–≤</strong> - —ç—Ç–æ:</p>
                <ul>
                    <li>üé® <strong>–ö—Ä–∞—Å–∏–≤—ã–µ –≥–æ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏</strong> - –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ</li>
                    <li>‚ö° <strong>–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ</strong> - —Å–∞–π—Ç –≥–æ—Ç–æ–≤ –∑–∞ 15 –º–∏–Ω—É—Ç</li>
                    <li>üì± <strong>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</strong> - –æ—Ç–ª–∏—á–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</li>
                    <li>üí∞ <strong>–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞</strong> - –≤ —Ä–∞–∑—ã –¥–µ—à–µ–≤–ª–µ —É—Å–ª—É–≥ –≤–µ–±-—Å—Ç—É–¥–∏–∏</li>
                    <li>üîß <strong>–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</strong> - –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π</li>
                </ul>
            </div>
            
            {{content}}
            
            <div class="highlight">
                <h3>üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!</h3>
                <p>–ü–æ–ª—É—á–∏—Ç–µ <strong>50% —Å–∫–∏–¥–∫—É</strong> –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–∞–π—Ç–∞!</p>
                <p><strong>–í–º–µ—Å—Ç–æ 5000‚ÇΩ - –≤—Å–µ–≥–æ 2500‚ÇΩ</strong></p>
            </div>
            
            <div style="text-align: center;">
                <a href="https://–≤–∞—à-—Å–∞–π—Ç.ru/constructor" class="cta-button">
                    üöÄ –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
                </a>
            </div>
            
            <p style="color: #666; font-size: 14px;">
                P.S. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ - –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 24 —á–∞—Å–∞!<br>
                –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ.
            </p>
        </div>
        
        <div class="footer">
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –°–∞–π—Ç–æ–≤</p>
            <p>–ï—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, <a href="#">–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</a></p>
            <p>–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, <a href="#">–Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a></p>
        </div>
    </div>
</body>
</html>';
    }

    protected function getInformationalTemplate(): string
    {
        return '
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{subject}}</title>
    <style>
        body { font-family: Georgia, serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f9f9f9; }
        .container { max-width: 600px; margin: 0 auto; background-color: #fff; padding: 30px; border-radius: 8px; }
        .header { text-align: center; padding-bottom: 20px; border-bottom: 1px solid #eee; }
        .content { padding: 20px 0; }
        .footer { text-align: center; padding: 15px 0; color: #666; font-size: 12px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 style="color: #2c3e50;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</h1>
        </div>
        
        <div class="content">
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{name}}!</p>
            {{content}}
        </div>
        
        <div class="footer">
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞</p>
        </div>
    </div>
</body>
</html>';
    }

    protected function getPromotionalTemplate(): string
    {
        return '
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{subject}}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .container { max-width: 600px; margin: 20px auto; background-color: #fff; border-radius: 15px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-align: center; padding: 30px; }
        .content { padding: 30px; }
        .promo-block { background: linear-gradient(45deg, #ffd700, #ffed4e); padding: 20px; border-radius: 10px; text-align: center; margin: 20px 0; }
        .footer { background-color: #f8f9fa; text-align: center; padding: 20px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</h1>
        </div>
        
        <div class="content">
            <p>–ü—Ä–∏–≤–µ—Ç, {{name}}!</p>
            
            <div class="promo-block">
                <h2 style="margin: 0; color: #333;">–ê–ö–¶–ò–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ì–û –í–†–ï–ú–ï–ù–ò!</h2>
            </div>
            
            {{content}}
        </div>
        
        <div class="footer">
            <p>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!</p>
        </div>
    </div>
</body>
</html>';
    }

    protected function handleFailedEmail(EmailCampaign $campaign, EmailRecipient $recipient, string $error): void
    {
        $shouldRetry = $recipient->attempts < $this->maxAttempts && 
                      $this->isRetryableError($error);

        if ($shouldRetry) {
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            $recipient->increment('attempts');
        } else {
            $recipient->markAsFailed($error);
            $campaign->increment('failed_count');
        }
    }

    protected function isRetryableError(string $error): bool
    {
        foreach ($this->retryableErrors as $retryableError) {
            if (stripos($error, $retryableError) !== false) {
                return true;
            }
        }
        
        return false;
    }

    protected function checkCampaignCompletion(EmailCampaign $campaign): void
    {
        $campaign = $campaign->fresh();
        $totalProcessed = $campaign->sent_count + $campaign->failed_count;
        
        if ($totalProcessed >= $campaign->total_recipients) {
            $campaign->update([
                'status' => 'completed',
                'completed_at' => now()
            ]);
        }
    }
}
