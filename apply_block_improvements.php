<?php

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ –∫–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º —Å–∏–¥–µ—Ä–æ–≤
 */

require_once __DIR__ . '/global_block_styles.php';

class FinalBlockStyleImprover
{
    private $seederDirectory;
    private $processedFiles = 0;
    private $totalFiles = 0;
    
    public function __construct($seederDirectory)
    {
        $this->seederDirectory = $seederDirectory;
    }
    
    /**
     * –£–ª—É—á—à–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ CSS –ø—Ä–∞–≤–∏–ª–∞
     */
    private function improveSpecificRules($css)
    {
        $improvements = [
            // –£–ª—É—á—à–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü
            '/border:\s*2px solid #000;/' => 'border: 1px solid #e9ecef;',
            '/border:\s*1px solid #333;/' => 'border: 1px solid #e9ecef;',
            '/border-color:\s*#000;/' => 'border-color: #dee2e6;',
            
            // –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–Ω–µ–π
            '/box-shadow:\s*none;/' => 'box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);',
            
            // –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤
            '/background-color:\s*#fff\s*!important;/' => 'background-color: #fff !important; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);',
            
            // –£–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            '/transition:\s*transform[^;]*;/' => 'transition: all 0.3s ease;',
            
            // –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
            '/padding:\s*30px 20px;/' => 'padding: 2rem 1.5rem;',
            '/padding:\s*2rem;/' => 'padding: 2rem; border-radius: 12px;',
        ];
        
        foreach ($improvements as $pattern => $replacement) {
            $css = preg_replace($pattern, $replacement, $css);
        }
        
        return $css;
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    private function addMissingCardStyles($css)
    {
        // –ò—â–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ box-shadow
        $cardSelectors = [
            'service-card', 'pricing-card', 'team-member', 'gallery-item',
            'testimonial-card', 'contact-form', 'info-item', 'process-step',
            'faq-item', 'cta-form-container', 'about-image', 'company-stats',
            'stat-item', 'pricing-card', 'member-photo', 'accordion-item'
        ];
        
        foreach ($cardSelectors as $selector) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ box-shadow –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            if (preg_match("/\.{$selector}[^{]*\{[^}]*box-shadow[^}]*\}/i", $css)) {
                continue; // –£–∂–µ –µ—Å—Ç—å box-shadow
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ CSS
            if (preg_match("/\.{$selector}(?:\s|[^a-zA-Z0-9-])/i", $css)) {
                // –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
                $addition = "\n\n.{$selector} {\n";
                $addition .= "    border-radius: 12px;\n";
                $addition .= "    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n";
                $addition .= "    transition: all 0.3s ease;\n";
                $addition .= "    overflow: hidden;\n";
                $addition .= "}\n";
                
                $addition .= "\n.{$selector}:hover {\n";
                $addition .= "    transform: translateY(-5px);\n";
                $addition .= "    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);\n";
                $addition .= "}";
                
                $css .= $addition;
            }
        }
        
        return $css;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–∏–¥–µ—Ä–∞
     */
    public function processSeederFile($filePath)
    {
        if (!file_exists($filePath)) {
            echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {$filePath}\n";
            return false;
        }
        
        $content = file_get_contents($filePath);
        $modified = false;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π CSS –±–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ
        $pattern = "/'css_content'\s*=>\s*'([^']*(?:\\\\'[^']*)*)'/s";
        
        $content = preg_replace_callback($pattern, function($matches) use (&$modified) {
            $cssContent = $matches[1];
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            $originalCss = str_replace("\\'", "'", $cssContent);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            $improvedCss = $this->improveSpecificRules($originalCss);
            $improvedCss = $this->addMissingCardStyles($improvedCss);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ CSS
            if ($originalCss !== $improvedCss) {
                $modified = true;
            }
            
            // –ö–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            $improvedCss = str_replace("'", "\\'", $improvedCss);
            
            return "'css_content' => '{$improvedCss}'";
        }, $content);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if ($modified) {
            if (file_put_contents($filePath, $content)) {
                echo "‚úÖ –£–ª—É—á—à–µ–Ω: " . basename($filePath) . "\n";
                $this->processedFiles++;
                return true;
            } else {
                echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " . basename($filePath) . "\n";
                return false;
            }
        } else {
            echo "‚ÑπÔ∏è  –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ —É–ª—É—á—à–µ–Ω): " . basename($filePath) . "\n";
            return true;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏–¥–µ—Ä–æ–≤
     */
    public function processAllSeeders()
    {
        $files = glob($this->seederDirectory . '/*BlockSeeder.php');
        
        if (empty($files)) {
            echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–∏–¥–µ—Ä–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {$this->seederDirectory}\n";
            return;
        }
        
        $this->totalFiles = count($files);
        
        echo "üé® –£–õ–£–ß–®–ï–ù–ò–ï –°–¢–ò–õ–ò–ó–ê–¶–ò–ò –ë–õ–û–ö–û–í\n";
        echo "=====================================\n";
        echo "–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {$this->totalFiles}\n";
        echo "–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n";
        
        foreach ($files as $file) {
            $this->processSeederFile($file);
        }
        
        echo "\nüéâ –ó–ê–í–ï–†–®–ï–ù–û!\n";
        echo "=====================================\n";
        echo "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {$this->processedFiles} –∏–∑ {$this->totalFiles}\n";
        echo "–ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —É–ª—É—á—à–µ–Ω—ã): " . ($this->totalFiles - $this->processedFiles) . "\n\n";
        
        echo "‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è:\n";
        echo "   ‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–∏ –∏ –≥—Ä–∞–Ω–∏—Ü—ã\n";
        echo "   ‚Ä¢ –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏\n";
        echo "   ‚Ä¢ –û–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã –∫–∞—Ä—Ç–æ—á–µ–∫\n";
        echo "   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞\n";
        echo "   ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã\n\n";
        
        echo "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
        echo "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: php artisan migrate:fresh --seed\n";
        echo "   ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à: php artisan cache:clear\n";
        echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–ª–æ–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ —Å–∞–π—Ç–æ–≤\n";
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
     */
    public function createBackup()
    {
        $backupDir = $this->seederDirectory . '_backup_' . date('Y-m-d_H-i-s');
        
        if (!is_dir($backupDir)) {
            mkdir($backupDir, 0777, true);
        }
        
        $files = glob($this->seederDirectory . '/*BlockSeeder.php');
        $copiedFiles = 0;
        
        foreach ($files as $file) {
            $filename = basename($file);
            if (copy($file, $backupDir . '/' . $filename)) {
                $copiedFiles++;
            }
        }
        
        echo "üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {$backupDir}\n";
        echo "   –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {$copiedFiles}\n\n";
        
        return $backupDir;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
echo "üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ò–Ø –°–¢–ò–õ–ò–ó–ê–¶–ò–ò –ë–õ–û–ö–û–í\n";
echo "=====================================\n\n";

$seederDir = __DIR__ . '/database/seeders';
$improver = new FinalBlockStyleImprover($seederDir);

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
echo "1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...\n";
$backupDir = $improver->createBackup();

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–∏–¥–µ—Ä—ã
echo "2Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π...\n";
$improver->processAllSeeders();

echo "üéä –í—Å–µ –≥–æ—Ç–æ–≤–æ! –í–∞—à–∏ –±–ª–æ–∫–∏ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥—è—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.\n";
echo "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {$backupDir}\n";
