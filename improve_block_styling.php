<?php

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –≤ —Å–∏–¥–µ—Ä–∞—Ö
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞: —Ç–µ–Ω–∏, –≥—Ä–∞–Ω–∏—Ü—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
 */

class BlockStylingImprover
{
    private $seederDirectory;
    
    public function __construct($seederDirectory)
    {
        $this->seederDirectory = $seederDirectory;
    }
    
    /**
     * –£–ª—É—á—à–∞–µ—Ç CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    private function improveCardStyles($css)
    {
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        $improvements = [
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω–∏ –∏ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
            '/\.([^{]*card[^{]*)\s*\{([^}]*background[^;]*;[^}]*)\}/i' => function($matches) {
                $selector = $matches[1];
                $properties = $matches[2];
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
                $newProperties = $properties;
                
                if (!preg_match('/border-radius/i', $properties)) {
                    $newProperties .= "\n    border-radius: 12px;";
                }
                
                if (!preg_match('/box-shadow/i', $properties)) {
                    $newProperties .= "\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);";
                }
                
                if (!preg_match('/border:/i', $properties)) {
                    $newProperties .= "\n    border: 1px solid #e9ecef;";
                }
                
                if (!preg_match('/transition/i', $properties)) {
                    $newProperties .= "\n    transition: transform 0.3s ease, box-shadow 0.3s ease;";
                }
                
                return ".{$selector} {{$newProperties}}";
            },
            
            // –£–ª—É—á—à–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            '/\.([^{]*card[^{]*):hover\s*\{([^}]*)\}/i' => function($matches) {
                $selector = $matches[1];
                $properties = $matches[2];
                
                $newProperties = $properties;
                
                if (!preg_match('/transform/i', $properties)) {
                    $newProperties .= "\n    transform: translateY(-8px);";
                }
                
                if (!preg_match('/box-shadow/i', $properties)) {
                    $newProperties .= "\n    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);";
                }
                
                return ".{$selector}:hover {{$newProperties}}";
            },
            
            // –£–ª—É—á—à–∞–µ–º item –∏ block —ç–ª–µ–º–µ–Ω—Ç—ã
            '/\.([^{]*(?:item|block)[^{]*)\s*\{([^}]*background[^;]*;[^}]*)\}/i' => function($matches) {
                $selector = $matches[1];
                $properties = $matches[2];
                
                $newProperties = $properties;
                
                if (!preg_match('/border-radius/i', $properties)) {
                    $newProperties .= "\n    border-radius: 8px;";
                }
                
                if (!preg_match('/box-shadow/i', $properties)) {
                    $newProperties .= "\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);";
                }
                
                if (!preg_match('/border:/i', $properties)) {
                    $newProperties .= "\n    border: 1px solid #e9ecef;";
                }
                
                return ".{$selector} {{$newProperties}}";
            }
        ];
        
        foreach ($improvements as $pattern => $replacement) {
            if (is_callable($replacement)) {
                $css = preg_replace_callback($pattern, $replacement, $css);
            }
        }
        
        return $css;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–∏–¥–µ—Ä–∞
     */
    public function improveSeedFile($filePath)
    {
        if (!file_exists($filePath)) {
            echo "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {$filePath}\n";
            return false;
        }
        
        $content = file_get_contents($filePath);
        
        // –ù–∞—Ö–æ–¥–∏–º CSS –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —É–ª—É—á—à–∞–µ–º –µ–≥–æ
        $pattern = "/'css_content'\s*=>\s*'([^']*(?:\\\\'[^']*)*)'/s";
        
        $content = preg_replace_callback($pattern, function($matches) {
            $cssContent = $matches[1];
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            $cssContent = str_replace("\\'", "'", $cssContent);
            
            // –£–ª—É—á—à–∞–µ–º —Å—Ç–∏–ª–∏
            $improvedCss = $this->improveCardStyles($cssContent);
            
            // –ö–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            $improvedCss = str_replace("'", "\\'", $improvedCss);
            
            return "'css_content' => '{$improvedCss}'";
        }, $content);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        if (file_put_contents($filePath, $content)) {
            echo "‚úÖ –£–ª—É—á—à–µ–Ω: " . basename($filePath) . "\n";
            return true;
        } else {
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " . basename($filePath) . "\n";
            return false;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏–¥–µ—Ä–æ–≤
     */
    public function improveAllSeeders()
    {
        $files = glob($this->seederDirectory . '/*BlockSeeder.php');
        
        if (empty($files)) {
            echo "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–∏–¥–µ—Ä–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {$this->seederDirectory}\n";
            return;
        }
        
        echo "–ù–∞–π–¥–µ–Ω–æ " . count($files) . " —Ñ–∞–π–ª–æ–≤ —Å–∏–¥–µ—Ä–æ–≤\n";
        echo "–ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏...\n\n";
        
        $successCount = 0;
        
        foreach ($files as $file) {
            if ($this->improveSeedFile($file)) {
                $successCount++;
            }
        }
        
        echo "\n‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
        echo "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {$successCount} –∏–∑ " . count($files) . " —Ñ–∞–π–ª–æ–≤\n";
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è CSS
     */
    private function addGeneralImprovements($css)
    {
        $generalStyles = '
/* –û–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ */
.container {
    max-width: 1200px;
}

/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */
.btn {
    border-radius: 8px;
    font-weight: 500;
    padding: 12px 24px;
    transition: all 0.3s ease;
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã */
.form-control, .form-select {
    border-radius: 8px;
    border: 1px solid #e9ecef;
    padding: 12px 15px;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.form-control:focus, .form-select:focus {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ */
h1, h2, h3, h4, h5, h6 {
    font-weight: 600;
    line-height: 1.2;
}

/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */
img {
    border-radius: 8px;
}';
        
        return $css . $generalStyles;
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
$seederDir = __DIR__ . '/database/seeders';
$improver = new BlockStylingImprover($seederDir);
$improver->improveAllSeeders();

echo "\nüé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
echo "–í—Å–µ –±–ª–æ–∫–∏ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–µ–Ω—è–º–∏, –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏.\n";
